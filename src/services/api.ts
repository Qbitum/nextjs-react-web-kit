/* tslint:disable */
/* eslint-disable */
/**
 * APIs
 * This is services apis.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface Overview
 */
export interface Overview {
    /**
     * 
     * @type {string}
     * @memberof Overview
     */
    'jobStatus': string;
    /**
     * 
     * @type {number}
     * @memberof Overview
     */
    'totalNoOfJobs': number;
}
/**
 * 
 * @export
 * @interface Summary
 */
export interface Summary {
    /**
     * 
     * @type {string}
     * @memberof Summary
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof Summary
     */
    'message'?: string;
    /**
     * 
     * @type {Array<Overview>}
     * @memberof Summary
     */
    'data'?: Array<Overview>;
}

/**
 * WebApi - axios parameter creator
 * @export
 */
export const WebApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API description
         * @summary API summary
         * @param {string} xClientId client ID
         * @param {string} [authorization] Bearer Token for Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        summaryID: async (xClientId: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xClientId' is not null or undefined
            assertParamExists('summaryID', 'xClientId', xClientId)
            const localVarPath = `/v1/sample`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xClientId != null) {
                localVarHeaderParameter['X-Client-Id'] = String(xClientId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebApi - functional programming interface
 * @export
 */
export const WebApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebApiAxiosParamCreator(configuration)
    return {
        /**
         * API description
         * @summary API summary
         * @param {string} xClientId client ID
         * @param {string} [authorization] Bearer Token for Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async summaryID(xClientId: string, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Summary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.summaryID(xClientId, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebApi - factory interface
 * @export
 */
export const WebApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebApiFp(configuration)
    return {
        /**
         * API description
         * @summary API summary
         * @param {string} xClientId client ID
         * @param {string} [authorization] Bearer Token for Authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        summaryID(xClientId: string, authorization?: string, options?: any): AxiosPromise<Summary> {
            return localVarFp.summaryID(xClientId, authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebApi - object-oriented interface
 * @export
 * @class WebApi
 * @extends {BaseAPI}
 */
export class WebApi extends BaseAPI {
    /**
     * API description
     * @summary API summary
     * @param {string} xClientId client ID
     * @param {string} [authorization] Bearer Token for Authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebApi
     */
    public summaryID(xClientId: string, authorization?: string, options?: AxiosRequestConfig) {
        return WebApiFp(this.configuration).summaryID(xClientId, authorization, options).then((request) => request(this.axios, this.basePath));
    }
}


